{
    "env": {
        "browser": true,
        "es2021": true,
        "jest/globals": true
    },
    //"files": ["*.js'", "*.jsx", "*.ts", "*.tsx"],
    "extends": [
        "standard-with-typescript",
        "eslint:recommended",
        "plugin:react/recommended",
        "plugin:@typescript-eslint/recommended",
        "plugin:react-hooks/recommended",
        "eslint:recommended"
    ],
    "parserOptions": {
        "ecmaVersion": "latest",
        "sourceType": "module",
        "project": [
            "./tsconfig.json"
        ]
    },
    "plugins": [
        "react",
        "react-hooks",
        "jest"
    ],
    "ignorePatterns": [
        "reportWebVitals.js"
    ],
    "rules": {
        "@typescript-eslint/no-misused-promises":"off",
        "react/jsx-uses-vars": "error",
        "@typescript-eslint/no-invalid-void-type": 0,
        "react/jsx-closing-bracket-location": [
            1,
            "tag-aligned"
        ],
        "react/display-name": 0,
        "react-hooks/rules-of-hooks": "error",
        "react-hooks/exhaustive-deps": "warn",
        "object-property-newline": [
            1,
            {
                "allowAllPropertiesOnSameLine": true
            }
        ],
        "no-console": "warn",
        "multiline-ternary": 0,
        "@stylistic/js/multiline-ternary": 0,
        "react/jsx-max-props-per-line": [
            1,
            {
                "maximum": {
                    "single": 2,
                    "multi": 1
                }
            }
        ],
        "react/jsx-key": [
            1,
            {
                "checkFragmentShorthand": true
            }
        ],
        "@typescript-eslint/consistent-type-imports": 0,
        "@typescript-eslint/explicit-function-return-type": 0,
        "@typescript-eslint/strict-boolean-expressions": 0,
        "@typescript-eslint/semi": [
            1,
            "always"
        ],
        "@typescript-eslint/indent": [
            1,
            4
        ],
        "react/prop-types": 0,
        "import/no-extraneous-dependencies": 0,
        "arrow-body-style": 0,
        "react/require-default-props": 0,
        "react/jsx-uses-react": 0,
        "react/react-in-jsx-scope": 0,
        "react/self-closing-comp": "error",
        "react/jsx-sort-props": [
            1,
            {
                "callbacksLast": true,
                "noSortAlphabetically": true,
                "reservedFirst": true
            }
        ],
        "react/jsx-tag-spacing": [
            1,
            {
                "closingSlash": "never",
                "beforeSelfClosing": "always",
                "afterOpening": "never",
                "beforeClosing": "allow"
            }
        ],
        "react/jsx-props-no-spreading": [
            1,
            {
                "html": "ignore"
            }
        ],
        "react/jsx-one-expression-per-line": [
            1,
            {
                "allow": "literal"
            }
        ],
        "react/jsx-no-useless-fragment": [
            1,
            {
                "allowExpressions": true
            }
        ],
        //"react/jsx-newline": [1, { "prevent": true }],
        "react/jsx-first-prop-new-line": [
            1,
            "multiline"
        ],
        "react/jsx-curly-spacing": [
            1,
            {
                "when": "never"
            }
        ],
        "react/jsx-curly-newline": [
            1
        ],
        "react/jsx-curly-brace-presence": [
            1,
            {
                "props": "never",
                "children": "never"
            }
        ]
    },
    "settings": {
        "react": {
            "createClass": "createReactClass", // Regex for Component Factory to use,
            // default to "createReactClass"
            "pragma": "React", // Pragma to use, default to "React"
            "fragment": "Fragment", // Fragment to use (may be a property of <pragma>), default to "Fragment"
            "version": "detect", // React version. "detect" automatically picks the version you have installed.
            // You can also use `16.0`, `16.3`, etc, if you want to override the detected value.
            // It will default to "latest" and warn if missing, and to "detect" in the future
            "flowVersion": "0.53" // Flow version
        },
        "propWrapperFunctions": [
            // The names of any function used to wrap propTypes, e.g. `forbidExtraProps`. If this isn't set, any propTypes wrapped in a function will be skipped.
            "forbidExtraProps",
            {
                "property": "freeze",
                "object": "Object"
            },
            {
                "property": "myFavoriteWrapper"
            },
            // for rules that check exact prop wrappers
            {
                "property": "forbidExtraProps",
                "exact": true
            }
        ]
    }
}